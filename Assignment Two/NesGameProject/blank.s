;
; File generated by cc65 v 2.19 - Git b75f872
;
	.fopt		compiler,"cc65 v 2.19 - Git b75f872"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_check_collision
	.export		_testSprite
	.export		_testPortal1
	.export		_testPortal2
	.export		_testSpriteData
	.export		_portal1SpriteData
	.export		_portal2SpriteData
	.export		_drawSprite
	.export		_paletteBackground
	.export		_paletteSprite
	.export		_i
	.export		_pad1
	.export		_portal1Collision
	.export		_portal2Collision
	.export		_text
	.export		_movement
	.export		_portalPlayerCollision
	.export		_testFunc
	.export		_main

.segment	"DATA"

_testSpriteData:
	.byte	$40
	.byte	$50
	.byte	$0F
	.byte	$0E
_portal1SpriteData:
	.byte	$C8
	.byte	$50
	.byte	$07
	.byte	$02
_portal2SpriteData:
	.byte	$64
	.byte	$50
	.byte	$07
	.byte	$02

.segment	"RODATA"

_testSprite:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_testPortal1:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$81
	.byte	$80
_testPortal2:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$82
	.byte	$80
_paletteBackground:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$27
	.byte	$12
	.byte	$14
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletteSprite:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_text:
	.byte	$43,$41,$49,$4E,$45,$27,$53,$20,$54,$45,$53,$54,$20,$50,$52,$4F
	.byte	$4A,$45,$43,$54,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_pad1:
	.res	1,$00
_portal1Collision:
	.res	1,$00
_portal2Collision:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ drawSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprite: near

.segment	"CODE"

;
; oam_clear(); // Clears all sprites from the sprite buffer.
;
	jsr     _oam_clear
;
; oam_meta_spr(testSpriteData.X, testSpriteData.Y, testSprite); // Draws the metasprite at x pos 64, y pos 80 and using the testSprite data. Nes Screen is 256 x 240 in pixels, so max range for sprite drawing is 255, 239.
;
	jsr     decsp2
	lda     _testSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _testSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_testSprite)
	ldx     #>(_testSprite)
	jsr     _oam_meta_spr
;
; oam_meta_spr(portal1SpriteData.X, portal1SpriteData.Y, testPortal1);
;
	jsr     decsp2
	lda     _portal1SpriteData
	ldy     #$01
	sta     (sp),y
	lda     _portal1SpriteData+1
	dey
	sta     (sp),y
	lda     #<(_testPortal1)
	ldx     #>(_testPortal1)
	jsr     _oam_meta_spr
;
; oam_meta_spr(portal2SpriteData.X, portal2SpriteData.Y, testPortal2);
;
	jsr     decsp2
	lda     _portal2SpriteData
	ldy     #$01
	sta     (sp),y
	lda     _portal2SpriteData+1
	dey
	sta     (sp),y
	lda     #<(_testPortal2)
	ldx     #>(_testPortal2)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if(pad1 & PAD_LEFT){ // If Left on the DPAD is pressed, remove one from the player's X data.
;
	lda     _pad1
	and     #$02
	beq     L0006
;
; testSpriteData.X -= 1;
;
	dec     _testSpriteData
;
; else if (pad1 & PAD_RIGHT){ // If Right on the DPAD is pressed, add one to the player's X data.
;
	rts
L0006:	lda     _pad1
	and     #$01
	beq     L0004
;
; testSpriteData.X += 1;
;
	inc     _testSpriteData
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ portalPlayerCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_portalPlayerCollision: near

.segment	"CODE"

;
; portal1Collision = check_collision(&testSpriteData, &portal1SpriteData); // Checks if the player is colliding with the data for the first portal.
;
	lda     #<(_testSpriteData)
	ldx     #>(_testSpriteData)
	jsr     pushax
	lda     #<(_portal1SpriteData)
	ldx     #>(_portal1SpriteData)
	jsr     _check_collision
	sta     _portal1Collision
;
; portal2Collision = check_collision(&testSpriteData, &portal2SpriteData); // Checks if the player is colliding with the data for the second portal.
;
	lda     #<(_testSpriteData)
	ldx     #>(_testSpriteData)
	jsr     pushax
	lda     #<(_portal2SpriteData)
	ldx     #>(_portal2SpriteData)
	jsr     _check_collision
	sta     _portal2Collision
;
; if (portal1Collision) // If the player is colliding with the first portal.
;
	lda     _portal1Collision
	beq     L0002
;
; testSpriteData.X = portal2SpriteData.X; // Sets the player X data to the X location of the second portal.
;
	lda     _portal2SpriteData
	sta     _testSpriteData
;
; testSpriteData.Y = portal2SpriteData.Y; // Sets the player Y data to the Y location of the second portal.
;
	lda     _portal2SpriteData+1
	sta     _testSpriteData+1
;
; else if (portal2Collision) // If the player is colliding with the second portal.
;
	rts
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ testFunc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_testFunc: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // Turns the screen off.
;
	jsr     _ppu_off
;
; pal_bg(paletteBackground); // Sets the Background Palette.
;
	lda     #<(_paletteBackground)
	ldx     #>(_paletteBackground)
	jsr     _pal_bg
;
; pal_spr(paletteSprite); // Sets the Sprite Palette.
;
	lda     #<(_paletteSprite)
	ldx     #>(_paletteSprite)
	jsr     _pal_spr
;
; bank_spr(1); // Tells the program to use the second batch of tiles from the bank for the sprite. Both background and sprite uses 0 by default, however Alpha3 has the sprite tiles on 2.
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(0,0)); // Sets starting point for the text to 0, 0.
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; i = 0; // Sets [i] to 0, so the text displays from the beginning.
;
	lda     #$00
	sta     _i
;
; while(text[i]){ // Runs while there is still chars in the text string.
;
	jmp     L0004
;
; vram_put(text[i]); // Pushes the [i] char from the text string to the screen.
;
L0002:	ldy     _i
	lda     _text,y
	jsr     _vram_put
;
; ++i; // Increments [i]
;
	inc     _i
;
; while(text[i]){ // Runs while there is still chars in the text string.
;
L0004:	ldy     _i
	lda     _text,y
	bne     L0002
;
; ppu_on_all(); // Turns on the Screen.
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0007:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);  // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; drawSprite(); // Draw all sprites.
;
	jsr     _drawSprite
;
; movement(); // Handle Player Movement.
;
	jsr     _movement
;
; portalPlayerCollision(); // Handle Portal Collision with the Player.
;
	jsr     _portalPlayerCollision
;
; while (1){
;
	jmp     L0007

.endproc

