;
; File generated by cc65 v 2.19 - Git b75f872
;
	.fopt		compiler,"cc65 v 2.19 - Git b75f872"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_write
	.import		_check_collision
	.import		_set_scroll_y
	.export		_playerSprite
	.export		_playerShootUpSprite
	.export		_playerShootDownSprite
	.export		_playerShootLeftSprite
	.export		_playerShootRightSprite
	.export		_playerShootTopRightSprite
	.export		_playerShootBottomRightSprite
	.export		_playerShootBottomLeftSprite
	.export		_playerShootTopLeftSprite
	.export		_orangePortal
	.export		_bluePortal
	.export		_orangeBulletSprite
	.export		_blueBulletSprite
	.export		_playerSpriteData
	.export		_orangePortalSpriteData
	.export		_bluePortalSpriteData
	.export		_orangeBulletSpriteData
	.export		_blueBulletSpriteData
	.export		_bluePortalActive
	.export		_orangePortalActive
	.export		_drawOrangePortalSprite
	.export		_drawBluePortalSprite
	.export		_paletteBackground
	.export		_paletteSprite
	.export		_levelOneData
	.export		_levelOneCollision
	.export		_menu
	.export		_pad1
	.export		_orangePortalCollision
	.export		_bluePortalCollision
	.export		_lastPortalUsed
	.export		_bulletActive
	.export		_mode
	.export		_aimDirectionX
	.export		_aimDirectionY
	.export		_bulletDirectionX
	.export		_bulletDirectionY
	.export		_playerVelocity
	.export		_currentLevel
	.export		_gameState
	.export		_modeToggle
	.export		_walkMode
	.export		_shootMode
	.export		_portalPlayerCollision
	.export		_wallDetection
	.export		_playerWallCollision
	.export		_spawnOrangeBullet
	.export		_spawnBlueBullet
	.export		_updateBullet
	.export		_drawBullet
	.export		_onGround
	.export		_applyGravity
	.export		_getPlayerSprite
	.export		_drawSprite
	.export		_loadLevel
	.export		_drawMainMenu
	.export		_main

.segment	"DATA"

_playerSpriteData:
	.byte	$10
	.byte	$C8
	.byte	$0F
	.byte	$0E
_orangePortalSpriteData:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
_bluePortalSpriteData:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
_orangeBulletSpriteData:
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
_blueBulletSpriteData:
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
_bluePortalActive:
	.byte	$00
_orangePortalActive:
	.byte	$00
_lastPortalUsed:
	.byte	$00
_bulletActive:
	.byte	$00
_mode:
	.byte	$00
_aimDirectionX:
	.byte	$00
_aimDirectionY:
	.byte	$00
_bulletDirectionX:
	.byte	$00
_bulletDirectionY:
	.byte	$00
_playerVelocity:
	.byte	$00

.segment	"RODATA"

_playerSprite:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_playerShootUpSprite:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_playerShootDownSprite:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$80
_playerShootLeftSprite:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$80
_playerShootRightSprite:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_playerShootTopRightSprite:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$80
_playerShootBottomRightSprite:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_playerShootBottomLeftSprite:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$80
_playerShootTopLeftSprite:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$80
_orangePortal:
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$EF
	.byte	$81
	.byte	$08
	.byte	$00
	.byte	$EF
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$EF
	.byte	$C1
	.byte	$80
_bluePortal:
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$EF
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$EF
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$EF
	.byte	$C2
	.byte	$80
_orangeBulletSprite:
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$01
	.byte	$80
_blueBulletSprite:
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$02
	.byte	$80
_paletteBackground:
	.byte	$0F
	.byte	$01
	.byte	$10
	.byte	$30
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletteSprite:
	.byte	$0F
	.byte	$36
	.byte	$30
	.byte	$27
	.byte	$0F
	.byte	$27
	.byte	$10
	.byte	$27
	.byte	$0F
	.byte	$27
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_levelOneData:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_levelOneCollision:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_menu:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$43
	.byte	$61
	.byte	$69
	.byte	$6E
	.byte	$65
	.byte	$74
	.byte	$69
	.byte	$6E
	.byte	$79
	.byte	$61
	.byte	$72
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_orangePortalCollision:
	.res	1,$00
_bluePortalCollision:
	.res	1,$00
_currentLevel:
	.res	1,$00
_gameState:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ drawOrangePortalSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawOrangePortalSprite: near

.segment	"CODE"

;
; if (orangePortalActive)
;
	lda     _orangePortalActive
	beq     L0002
;
; oam_meta_spr(orangePortalSpriteData.X, orangePortalSpriteData.Y, orangePortal);
;
	jsr     decsp2
	lda     _orangePortalSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _orangePortalSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_orangePortal)
	ldx     #>(_orangePortal)
	jmp     _oam_meta_spr
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawBluePortalSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBluePortalSprite: near

.segment	"CODE"

;
; if (bluePortalActive)
;
	lda     _bluePortalActive
	beq     L0002
;
; oam_meta_spr(bluePortalSpriteData.X, bluePortalSpriteData.Y, bluePortal);
;
	jsr     decsp2
	lda     _bluePortalSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _bluePortalSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_bluePortal)
	ldx     #>(_bluePortal)
	jmp     _oam_meta_spr
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ modeToggle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_modeToggle: near

.segment	"CODE"

;
; unsigned char newSelect = (pad1 & PAD_SELECT); // Sets the new select value to if the button is pressed.
;
	lda     _pad1
	and     #$20
	jsr     pusha
;
; if (newSelect && !oldSelect) // If the value is different, AKA, the button has been pressed.
;
	ldy     #$00
	lda     (sp),y
	beq     L000A
	lda     M0001
	bne     L000A
;
; mode = !mode; // Flip the mode value.
;
	lda     _mode
	jsr     bnega
	sta     _mode
;
; oldSelect = newSelect; // Set the oldSelect to the newSelect, as it is now the old select state.
;
L000A:	lda     (sp),y
	sta     M0001
;
; }
;
	jmp     incsp1

.segment	"DATA"

M0001:
	.byte	$00

.endproc

; ---------------------------------------------------------------
; void __near__ walkMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_walkMode: near

.segment	"CODE"

;
; if (pad1 & PAD_LEFT) // If Left on the DPAD is pressed.
;
	lda     _pad1
	and     #$02
	beq     L0007
;
; playerSpriteData.X--; // Decrement the X data of the Player Sprite. 
;
	dec     _playerSpriteData
;
; if (playerWallCollision(&playerSpriteData)) // If the new location of the Player Sprite is colliding with a wall.
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _playerWallCollision
	tax
	beq     L0006
;
; playerSpriteData.X++; // Increment the X data to move it out of the wall.
;
	inc     _playerSpriteData
;
; else if (pad1 & PAD_RIGHT) // If Right on the DPAD is pressed.
;
	rts
L0007:	lda     _pad1
	and     #$01
	beq     L0006
;
; playerSpriteData.X++; // Increment the X data of the Player Sprite.
;
	inc     _playerSpriteData
;
; if (playerWallCollision(&playerSpriteData)) // If the new location of the Player Sprite is colliding with a wall.
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     _playerWallCollision
	tax
	beq     L0006
;
; playerSpriteData.X--; // Decrement the X data to move it out of the wall.
;
	dec     _playerSpriteData
;
; }
;
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shootMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shootMode: near

.segment	"CODE"

;
; signed char newDirectionX = 0; // Resets the X aiming direction.
;
	lda     #$00
	jsr     pusha
;
; signed char newDirectionY = 0; // Resets the Y aiming direction.
;
	jsr     pusha
;
; if (pad1 & PAD_UP) // If up is pressed on the DPAD.
;
	lda     _pad1
	and     #$08
	beq     L0015
;
; newDirectionY = -1; // Set the aiming direction for Y to -1.
;
	lda     #$FF
;
; else if (pad1 & PAD_DOWN) // If down is pressed on the DPAD.
;
	jmp     L0019
L0015:	lda     _pad1
	and     #$04
	beq     L0016
;
; newDirectionY = 1; // Set the aiming direction for Y to 1.
;
	lda     #$01
L0019:	ldy     #$00
	sta     (sp),y
;
; if (pad1 & PAD_LEFT) // If left is pressed on the DPAD.
;
L0016:	lda     _pad1
	and     #$02
	beq     L0017
;
; newDirectionX = -1; // Set the aiming direction for X to -1.
;
	lda     #$FF
;
; else if (pad1 & PAD_RIGHT) // If right is pressed on the DPAD.
;
	jmp     L001A
L0017:	lda     _pad1
	and     #$01
	beq     L0007
;
; newDirectionX = 1; // Set the aiming direction for X to 1.
;
	lda     #$01
L001A:	ldy     #$01
	sta     (sp),y
;
; if (newDirectionX != 0 || newDirectionY != 0) // If the aiming has been changed. 
;
L0007:	ldy     #$01
	lda     (sp),y
	bne     L001B
	dey
	lda     (sp),y
	beq     L0008
;
; aimDirectionX = newDirectionX; // Set the aiming direction X to the new direction.
;
	iny
L001B:	lda     (sp),y
	sta     _aimDirectionX
;
; aimDirectionY = newDirectionY; // Set the aiming direction Y to the new direction.
;
	dey
	lda     (sp),y
	sta     _aimDirectionY
;
; if (!bulletActive) // If there is no bullet on the screen currently.
;
L0008:	lda     _bulletActive
	bne     L0012
;
; if (pad1 & PAD_A) // If the A button is pressed.
;
	lda     _pad1
	and     #$80
	beq     L0018
;
; spawnOrangeBullet(); // Shoot an orange bullet.
;
	jsr     _spawnOrangeBullet
;
; else if (pad1 & PAD_B) // If the B button is pressed.
;
	jmp     incsp2
L0018:	lda     _pad1
	and     #$40
	beq     L0012
;
; spawnBlueBullet(); // Shoot a blue bullet.
;
	jsr     _spawnBlueBullet
;
; }
;
L0012:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ portalPlayerCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_portalPlayerCollision: near

.segment	"CODE"

;
; orangePortalCollision = check_collision(&playerSpriteData, &orangePortalSpriteData); // Checks if the player is colliding with the data for the first portal.
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_orangePortalSpriteData)
	ldx     #>(_orangePortalSpriteData)
	jsr     _check_collision
	sta     _orangePortalCollision
;
; bluePortalCollision = check_collision(&playerSpriteData, &bluePortalSpriteData); // Checks if the player is colliding with the data for the second portal.
;
	lda     #<(_playerSpriteData)
	ldx     #>(_playerSpriteData)
	jsr     pushax
	lda     #<(_bluePortalSpriteData)
	ldx     #>(_bluePortalSpriteData)
	jsr     _check_collision
	sta     _bluePortalCollision
;
; if (orangePortalCollision && lastPortalUsed != 1) // If the player is colliding with the first portal, and the previously used portal isn't the first one.
;
	lda     _orangePortalCollision
	beq     L0002
	lda     _lastPortalUsed
	cmp     #$01
	beq     L0002
;
; playerSpriteData.X = bluePortalSpriteData.X; // Sets the player X data to the X location of the second portal.
;
	lda     _bluePortalSpriteData
	sta     _playerSpriteData
;
; playerSpriteData.Y = bluePortalSpriteData.Y; // Sets the player Y data to the Y location of the second portal.
;
	lda     _bluePortalSpriteData+1
	sta     _playerSpriteData+1
;
; lastPortalUsed = 2; // Sets the last used portal as the first portal, or arrived at portal two.
;
	lda     #$02
;
; else if (bluePortalCollision && lastPortalUsed != 2) // If the player is colliding with the second portal, and the previously used portal isn't the second one.
;
	jmp     L0010
L0002:	lda     _bluePortalCollision
	beq     L0007
	lda     _lastPortalUsed
	cmp     #$02
	beq     L0007
;
; playerSpriteData.X = orangePortalSpriteData.X; // Sets the player X data to the X location of the first portal. 
;
	lda     _orangePortalSpriteData
	sta     _playerSpriteData
;
; playerSpriteData.Y = orangePortalSpriteData.Y; // Sets the player Y data to the Y location of the first portal.
;
	lda     _orangePortalSpriteData+1
	sta     _playerSpriteData+1
;
; lastPortalUsed = 1; // Sets the last used portal as the second portal, or arrived at portal one.
;
	lda     #$01
;
; else
;
	jmp     L0010
;
; if (!orangePortalCollision && !bluePortalCollision) // If the player is not touching any portals.
;
L0007:	lda     _orangePortalCollision
	bne     L0015
	lda     _bluePortalCollision
	beq     L0010
L0015:	rts
;
; lastPortalUsed = 0; // Sets the last used portal as 0, also means the player can now use any portal.
;
L0010:	sta     _lastPortalUsed
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ wallDetection (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wallDetection: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; if (x >= 32 || y >= 30) // Checks if the player is out of the screen area somehow.
;
	ldy     #$01
	lda     (sp),y
	cmp     #$20
	bcs     L0009
	dey
	lda     (sp),y
	cmp     #$1E
	bcs     L0009
	ldx     #$00
	jmp     L000A
;
; return 1; // Returns a 1 to represent collision.
;
L0009:	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; switch (currentLevel)
;
L000A:	lda     _currentLevel
;
; }
;
	bne     L0006
;
; return levelOneCollision[y * 32 + x];
;
	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L0008
	inx
L0008:	sta     ptr1
	txa
	clc
	adc     #>(_levelOneCollision)
	sta     ptr1+1
	ldy     #<(_levelOneCollision)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
L0006:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ playerWallCollision (struct spriteData *spr)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerWallCollision: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char leftTile   = spr->X >> 3; // Converts the pixel location of the left side of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char rightTile  = (spr->X + spr->width) >> 3; // Converts the pixel location of right side of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	sta     sreg
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     sreg
	ror     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char topTile    = spr->Y >> 3; // Converts the pixel location of the top half of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char bottomTile = (spr->Y + spr->height) >> 3; // Converts the pixel location of the bottom half of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	sta     sreg
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	clc
	adc     sreg
	ror     a
	lsr     a
	lsr     a
	jsr     pusha
;
; if (wallDetection(leftTile, topTile)  || wallDetection(rightTile, topTile) || wallDetection(leftTile, bottomTile) || wallDetection(rightTile, bottomTile)) // This checks if any of the tiles are a wall.
;
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0003
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0003
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0003
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _wallDetection
	tax
	beq     L0005
;
; return 1; // Returns a 1 to represent collision.
;
L0003:	ldx     #$00
	lda     #$01
;
; }
;
L0005:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ spawnOrangeBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnOrangeBullet: near

.segment	"CODE"

;
; orangeBulletSpriteData.X = playerSpriteData.X; // Sets the orange bullet X data to the Players X data.
;
	lda     _playerSpriteData
	sta     _orangeBulletSpriteData
;
; orangeBulletSpriteData.Y = playerSpriteData.Y; // Sets the orange bullet Y data to the Players Y data.
;
	lda     _playerSpriteData+1
	sta     _orangeBulletSpriteData+1
;
; bulletActive = 1; // Sets the bullet active to 1, to indicate it is a orange bullet.
;
	lda     #$01
	sta     _bulletActive
;
; bulletDirectionX = aimDirectionX; // Takes the X bullet direction from the X aiming direction.
;
	lda     _aimDirectionX
	sta     _bulletDirectionX
;
; bulletDirectionY = aimDirectionY; // Takes the Y bullet direction from the Y aiming direction.
;
	lda     _aimDirectionY
	sta     _bulletDirectionY
;
; if (bulletDirectionX == 0 && bulletDirectionY == 0) // If the user hasn't pressed any aiming buttons.
;
	lda     _bulletDirectionX
	bne     L0006
	lda     _bulletDirectionY
	beq     L0008
L0006:	rts
;
; bulletDirectionY = -1; // Default to shooting up.
;
L0008:	lda     #$FF
	sta     _bulletDirectionY
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawnBlueBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnBlueBullet: near

.segment	"CODE"

;
; blueBulletSpriteData.X = playerSpriteData.X; // Sets the blue bullet X data to the Players X data.
;
	lda     _playerSpriteData
	sta     _blueBulletSpriteData
;
; blueBulletSpriteData.Y = playerSpriteData.Y; // Sets the blue bullet Y data to the Players Y data.
;
	lda     _playerSpriteData+1
	sta     _blueBulletSpriteData+1
;
; bulletActive = 2; // Sets the bullet active to 2, to indicate it's a blue bullet.
;
	lda     #$02
	sta     _bulletActive
;
; bulletDirectionX = aimDirectionX; // Takes the X bullet direction from the X aiming direction.
;
	lda     _aimDirectionX
	sta     _bulletDirectionX
;
; bulletDirectionY = aimDirectionY; // Takes the Y bullet direction from the Y aiming direction.
;
	lda     _aimDirectionY
	sta     _bulletDirectionY
;
; if (bulletDirectionX == 0 && bulletDirectionY == 0) // If the user hasn't pressed any aiming buttons.
;
	lda     _bulletDirectionX
	bne     L0006
	lda     _bulletDirectionY
	beq     L0008
L0006:	rts
;
; bulletDirectionY = -1; // Default to shooting up.
;
L0008:	lda     #$FF
	sta     _bulletDirectionY
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateBullet: near

.segment	"CODE"

;
; if (bulletActive == 0) // If there is no bullet on the screen.
;
	lda     _bulletActive
;
; return; // Do nothing.
;
	bne     L0052
;
; }
;
	rts
;
; if (bulletActive == 1) // If there is an orange bullet on the screen.
;
L0052:	cmp     #$01
	jne     L0042
;
; orangeBulletSpriteData.X += bulletDirectionX; // Move the bullet across the screen.
;
	lda     _bulletDirectionX
	clc
	adc     _orangeBulletSpriteData
	sta     _orangeBulletSpriteData
;
; orangeBulletSpriteData.Y += bulletDirectionY;
;
	lda     _bulletDirectionY
	clc
	adc     _orangeBulletSpriteData+1
	sta     _orangeBulletSpriteData+1
;
; if (orangeBulletSpriteData.X > 250) // IF the bullet goes too far off the screen.
;
	lda     _orangeBulletSpriteData
	cmp     #$FB
	bcc     L0006
;
; bulletActive = 0; // Remove the bullet from being active.
;
	lda     #$00
	sta     _bulletActive
;
; return; 
;
	rts
;
; if (playerWallCollision(&orangeBulletSpriteData)) // If the orange bullet hits a wall.
;
L0006:	lda     #<(_orangeBulletSpriteData)
	ldx     #>(_orangeBulletSpriteData)
	jsr     _playerWallCollision
	tax
	bne     L0053
;
; }
;
	rts
;
; unsigned char tileX = (orangeBulletSpriteData.X + 4) >> 3; // Get the X tile from the centre of the bullet.
;
L0053:	ldx     #$00
	lda     _orangeBulletSpriteData
	clc
	adc     #$04
	bcc     L0008
	inx
L0008:	jsr     asrax3
	jsr     pusha
;
; unsigned char tileY = (orangeBulletSpriteData.Y + 4) >> 3; // Get the Y tile from the centre of the billet.
;
	ldx     #$00
	lda     _orangeBulletSpriteData+1
	clc
	adc     #$04
	bcc     L0009
	inx
L0009:	jsr     asrax3
	jsr     pusha
;
; if (bulletDirectionX > 0 && tileX > 0) 
;
	lda     _bulletDirectionX
	sec
	sbc     #$01
	bvs     L000C
	eor     #$80
L000C:	bpl     L003C
	ldy     #$01
	lda     (sp),y
	beq     L003C
;
; tileX--;
;
	sec
	sbc     #$01
	sta     (sp),y
;
; if (bulletDirectionY > 0 && tileY > 0) 
;
L003C:	lda     _bulletDirectionY
	sec
	sbc     #$01
	bvs     L0012
	eor     #$80
L0012:	bpl     L0010
	ldy     #$00
	lda     (sp),y
	beq     L0010
;
; tileY--;
;
	sec
	sbc     #$01
	sta     (sp),y
;
; if (bluePortalActive) // If there is a blue portal active.
;
L0010:	lda     _bluePortalActive
	beq     L0016
;
; unsigned char pTileX = bluePortalSpriteData.X >> 3; // Get the X tile from the blue portal.
;
	lda     _bluePortalSpriteData
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char pTileY = bluePortalSpriteData.Y >> 3; // Get the Y tile from the blue portal.
;
	lda     _bluePortalSpriteData+1
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; if (pTileX == tileX && pTileY == tileY) // If the tiles are the same for both portals.
;
	ldy     #$01
	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	bne     L0017
	ldy     #$00
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	bne     L0017
;
; bulletActive = 0; // Remove the bullet and do nothing.
;
	lda     #$00
	sta     _bulletActive
;
; return;
;
	jmp     incsp4
;
; }
;
L0017:	jsr     incsp2
;
; orangePortalSpriteData.X = tileX << 3; // Sets the orange portal X data to Tile X, if there is no portal there already.
;
L0016:	ldy     #$01
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _orangePortalSpriteData
;
; orangePortalSpriteData.Y = tileY << 3; // Sets the orange portal Y data to Tile Y, if there is no portal there already.
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _orangePortalSpriteData+1
;
; orangePortalActive = 1; // Sets the orange portal as active.
;
	lda     #$01
	sta     _orangePortalActive
;
; else if (bulletActive == 2) // If the bullet is a blue bullet.
;
	jmp     L0051
L0042:	lda     _bulletActive
	cmp     #$02
	beq     L0054
;
; }
;
	rts
;
; blueBulletSpriteData.X += bulletDirectionX; // Move the blue bullet sprite across the screen, in the direction of the X aiming variable, I.E, -1 to go left, +1 to go right.
;
L0054:	lda     _bulletDirectionX
	clc
	adc     _blueBulletSpriteData
	sta     _blueBulletSpriteData
;
; blueBulletSpriteData.Y += bulletDirectionY; // Move the blue bullet sprite across the screen, in the direction of the Y aiming variable, I.E, -1 to go up, +1 to go down.
;
	lda     _bulletDirectionY
	clc
	adc     _blueBulletSpriteData+1
	sta     _blueBulletSpriteData+1
;
; if (blueBulletSpriteData.X > 240) // If the bullet goes too far off the screen.
;
	lda     _blueBulletSpriteData
	cmp     #$F1
	bcc     L001F
;
; bulletActive = 0; // Remove the bullet.
;
	lda     #$00
	sta     _bulletActive
;
; return;
;
	rts
;
; if (playerWallCollision(&blueBulletSpriteData)) // If the blue bullet hits a wall.
;
L001F:	lda     #<(_blueBulletSpriteData)
	ldx     #>(_blueBulletSpriteData)
	jsr     _playerWallCollision
	tax
	bne     L0055
;
; }
;
	rts
;
; unsigned char tileX = (blueBulletSpriteData.X + 4) >> 3; // Get the X tile from the centre of the bullet.
;
L0055:	ldx     #$00
	lda     _blueBulletSpriteData
	clc
	adc     #$04
	bcc     L0021
	inx
L0021:	jsr     asrax3
	jsr     pusha
;
; unsigned char tileY = (blueBulletSpriteData.Y + 4) >> 3; // Get the Y tile from the centre of the bullet.
;
	ldx     #$00
	lda     _blueBulletSpriteData+1
	clc
	adc     #$04
	bcc     L0022
	inx
L0022:	jsr     asrax3
	jsr     pusha
;
; if (bulletDirectionX > 0 && tileX > 0) 
;
	lda     _bulletDirectionX
	sec
	sbc     #$01
	bvs     L0025
	eor     #$80
L0025:	bpl     L004A
	ldy     #$01
	lda     (sp),y
	beq     L004A
;
; tileX--;
;
	sec
	sbc     #$01
	sta     (sp),y
;
; if (bulletDirectionY > 0 && tileY > 0) 
;
L004A:	lda     _bulletDirectionY
	sec
	sbc     #$01
	bvs     L002B
	eor     #$80
L002B:	bpl     L0029
	ldy     #$00
	lda     (sp),y
	beq     L0029
;
; tileY--;
;
	sec
	sbc     #$01
	sta     (sp),y
;
; if (orangePortalActive) // If there is an orange portal active.
;
L0029:	lda     _orangePortalActive
	beq     L002F
;
; unsigned char pTileX = orangePortalSpriteData.X >> 3; // Get the X tile from the Orange Portal.
;
	lda     _orangePortalSpriteData
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char pTileY = orangePortalSpriteData.Y >> 3; // Get the Y tile from the Orange Portal.
;
	lda     _orangePortalSpriteData+1
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; if (pTileX == tileX && pTileY == tileY) // IF the tiles are the same for both portals.
;
	ldy     #$01
	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	bne     L0030
	ldy     #$00
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	bne     L0030
;
; bulletActive = 0; // Remove the bullet and do nothing.
;
	lda     #$00
	sta     _bulletActive
;
; return;
;
	jmp     incsp4
;
; }
;
L0030:	jsr     incsp2
;
; bluePortalSpriteData.X = tileX << 3; // Sets the blue portal X data to Tile X, if there is no portal there already.
;
L002F:	ldy     #$01
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _bluePortalSpriteData
;
; bluePortalSpriteData.Y = tileY << 3; // Sets the blue portal Y data to Tile Y, if there is no portal there already.
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _bluePortalSpriteData+1
;
; bluePortalActive = 1; // Sets the blue portal to active. 
;
	lda     #$01
	sta     _bluePortalActive
;
; bulletActive = 0; // Removes the bullet, allowing for more shots.
;
L0051:	sty     _bulletActive
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ drawBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBullet: near

.segment	"CODE"

;
; if (bulletActive == 1) // If the bullet active is orange.
;
	lda     _bulletActive
	cmp     #$01
	bne     L0006
;
; oam_meta_spr(orangeBulletSpriteData.X, orangeBulletSpriteData.Y, orangeBulletSprite); // Draw the orange sprite.
;
	jsr     decsp2
	lda     _orangeBulletSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _orangeBulletSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_orangeBulletSprite)
	ldx     #>(_orangeBulletSprite)
;
; else if (bulletActive == 2) // If the bullet active is blue.
;
	jmp     _oam_meta_spr
L0006:	lda     _bulletActive
	cmp     #$02
	bne     L0004
;
; oam_meta_spr(blueBulletSpriteData.X, blueBulletSpriteData.Y, blueBulletSprite); // Draw the blue sprite.
;
	jsr     decsp2
	lda     _blueBulletSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _blueBulletSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_blueBulletSprite)
	ldx     #>(_blueBulletSprite)
	jmp     _oam_meta_spr
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ onGround (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_onGround: near

.segment	"CODE"

;
; unsigned char footY = (playerSpriteData.Y + playerSpriteData.height + 1) >> 3;
;
	ldx     #$00
	lda     _playerSpriteData+1
	clc
	adc     _playerSpriteData+2
	bcc     L0008
	inx
	clc
L0008:	adc     #$01
	bcc     L0002
	inx
L0002:	jsr     asrax3
	jsr     pusha
;
; unsigned char footXLeft = playerSpriteData.X >> 3;
;
	lda     _playerSpriteData
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char footXRight = (playerSpriteData.X + playerSpriteData.width) >> 3;
;
	ldx     #$00
	lda     _playerSpriteData
	clc
	adc     _playerSpriteData+3
	bcc     L0007
	inx
L0007:	jsr     asrax3
	jsr     pusha
;
; if (wallDetection(footXLeft, footY) || wallDetection(footXRight, footY))
;
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0004
	lda     (sp,x)
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _wallDetection
	tax
	beq     L0001
;
; return 1;
;
L0004:	ldx     #$00
	lda     #$01
;
; }
;
L0001:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ applyGravity (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_applyGravity: near

.segment	"CODE"

;
; if (!onGround()) // If the player is not touching the ground.
;
	jsr     _onGround
	tax
	bne     L0002
;
; playerVelocity += GRAVITY; // Add gravity to the players velocity.
;
	inc     _playerVelocity
;
; if (playerVelocity > MAX_FALL_SPEED) // If the players max velocity is more than the max fall speed.
;
	lda     _playerVelocity
	sec
	sbc     #$05
	bvs     L0006
	eor     #$80
L0006:	bpl     L0010
;
; playerVelocity = MAX_FALL_SPEED; // Sets the velocity to the max fall speed.
;
	lda     #$04
;
; else // If the player is touching the ground.
;
	jmp     L000E
;
; if (playerVelocity > 0) // If the player still has velocity.
;
L0002:	lda     _playerVelocity
	sec
	sbc     #$01
	bvs     L000A
	eor     #$80
L000A:	bpl     L0010
;
; playerVelocity = 0; // Set the velocity to 0.
;
	lda     #$00
L000E:	sta     _playerVelocity
;
; if (playerVelocity != 0) // If the player has any velocity.
;
L0010:	lda     _playerVelocity
	beq     L0013
;
; playerSpriteData.Y += playerVelocity; // Move the player down the screen at the speed of the velocity.
;
	clc
	adc     _playerSpriteData+1
	sta     _playerSpriteData+1
;
; playerVelocity = 0;
;
	lda     #$00
L0013:	sta     _playerVelocity
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; const unsigned char *__near__ getPlayerSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getPlayerSprite: near

.segment	"CODE"

;
; if (mode == 0)
;
	lda     _mode
	bne     L0034
;
; return playerSprite;
;
	lda     #<(_playerSprite)
	ldx     #>(_playerSprite)
	rts
;
; if (aimDirectionX == 0 && aimDirectionY == -1)
;
L0034:	lda     _aimDirectionX
	bne     L0035
	lda     _aimDirectionY
	cmp     #$FF
	jeq     L002D
;
; if (aimDirectionX == 0 && aimDirectionY == 1)
;
L0035:	lda     _aimDirectionX
	bne     L0036
	lda     _aimDirectionY
	cmp     #$01
	bne     L0036
;
; return playerShootDownSprite;
;
	lda     #<(_playerShootDownSprite)
	ldx     #>(_playerShootDownSprite)
	rts
;
; if (aimDirectionX == -1 && aimDirectionY == 0)
;
L0036:	lda     _aimDirectionX
	cmp     #$FF
	bne     L0037
	lda     _aimDirectionY
	bne     L0037
;
; return playerShootLeftSprite;
;
	lda     #<(_playerShootLeftSprite)
	ldx     #>(_playerShootLeftSprite)
	rts
;
; if (aimDirectionX == 1 && aimDirectionY == 0)
;
L0037:	lda     _aimDirectionX
	cmp     #$01
	bne     L0038
	lda     _aimDirectionY
	bne     L0038
;
; return playerShootRightSprite;
;
	lda     #<(_playerShootRightSprite)
	ldx     #>(_playerShootRightSprite)
	rts
;
; if (aimDirectionX == -1 && aimDirectionY == -1)
;
L0038:	lda     _aimDirectionX
	cmp     #$FF
	bne     L0039
	lda     _aimDirectionY
	cmp     #$FF
	bne     L0039
;
; return playerShootTopLeftSprite;
;
	lda     #<(_playerShootTopLeftSprite)
	ldx     #>(_playerShootTopLeftSprite)
	rts
;
; if (aimDirectionX == 1 && aimDirectionY == -1)
;
L0039:	lda     _aimDirectionX
	cmp     #$01
	bne     L003A
	lda     _aimDirectionY
	cmp     #$FF
	bne     L003A
;
; return playerShootTopRightSprite;
;
	lda     #<(_playerShootTopRightSprite)
	ldx     #>(_playerShootTopRightSprite)
	rts
;
; if (aimDirectionX == -1 && aimDirectionY == 1)
;
L003A:	lda     _aimDirectionX
	cmp     #$FF
	bne     L003B
	lda     _aimDirectionY
	cmp     #$01
	bne     L003B
;
; return playerShootBottomLeftSprite;
;
	lda     #<(_playerShootBottomLeftSprite)
	ldx     #>(_playerShootBottomLeftSprite)
	rts
;
; if (aimDirectionX == 1 && aimDirectionY == 1)
;
L003B:	lda     _aimDirectionX
	cmp     #$01
	bne     L002D
	lda     _aimDirectionY
	cmp     #$01
	bne     L002D
;
; return playerShootBottomRightSprite;
;
	lda     #<(_playerShootBottomRightSprite)
	ldx     #>(_playerShootBottomRightSprite)
	rts
;
; return playerShootUpSprite;
;
L002D:	lda     #<(_playerShootUpSprite)
	ldx     #>(_playerShootUpSprite)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprite: near

.segment	"CODE"

;
; const unsigned char* currentSprite = getPlayerSprite();
;
	jsr     _getPlayerSprite
	jsr     pushax
;
; oam_meta_spr(playerSpriteData.X, playerSpriteData.Y, currentSprite); // Draws the metasprite at x pos 64, y pos 80 and using the playerSprite data. Nes Screen is 256 x 240 in pixels, so max range for sprite drawing is 255, 239.
;
	jsr     decsp2
	lda     _playerSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _playerSpriteData+1
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _oam_meta_spr
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ loadLevel (unsigned char lvl)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadLevel: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; ppu_off(); // Turn the screen off.
;
	jsr     _ppu_off
;
; switch(lvl) // Switches on level passed through when function is called.
;
	ldy     #$00
	lda     (sp),y
;
; } 
;
	bne     L0005
;
; vram_adr(NAMETABLE_A); // Sets the VRAM address to nametable A.
;
	ldx     #$20
	jsr     _vram_adr
;
; vram_write(levelOneData, 1024); // Writes all the data from levelOneData to nametable A, including the attribute table.
;
	lda     #<(_levelOneData)
	ldx     #>(_levelOneData)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; playerSpriteData.X = 16; // Sets the player to the bottom left tile, AKA, the starting point.
;
L0005:	lda     #$10
	sta     _playerSpriteData
;
; playerSpriteData.Y = 200; // Sets the player to the bottom left tile, AKA, the starting point.
;
	lda     #$C8
	sta     _playerSpriteData+1
;
; bluePortalActive = 0; // Disables the Blue portal.
;
	lda     #$00
	sta     _bluePortalActive
;
; orangePortalActive = 0; // Disables the Orange portal.
;
	sta     _orangePortalActive
;
; bulletActive = 0; // Disables any bullets still on screen.
;
	sta     _bulletActive
;
; lastPortalUsed = 0; // Allows the user to enter any portal.
;
	sta     _lastPortalUsed
;
; ppu_on_all(); // Turn the screen back on.
;
	jsr     _ppu_on_all
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ drawMainMenu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawMainMenu: near

.segment	"CODE"

;
; ppu_off(); // Turns the screen off.
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(menu, 1024);
;
	lda     #<(_menu)
	ldx     #>(_menu)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; ppu_on_all(); // Turns the screen back on.
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // Turns the screen off.
;
	jsr     _ppu_off
;
; pal_bg(paletteBackground); // Sets the Background Palette.
;
	lda     #<(_paletteBackground)
	ldx     #>(_paletteBackground)
	jsr     _pal_bg
;
; pal_spr(paletteSprite); // Sets the Sprite Palette.
;
	lda     #<(_paletteSprite)
	ldx     #>(_paletteSprite)
	jsr     _pal_spr
;
; set_scroll_y(0xff); // Moves the background down by 1 pixel.
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; gameState = 0; // 0 means main menu.
;
	lda     #$00
	sta     _gameState
;
; drawMainMenu();
;
	jsr     _drawMainMenu
;
; bank_spr(1); // Tells the program to use the second batch of tiles from the bank for the sprite. Both background and sprite uses 0 by default, however Alpha3 has the sprite tiles on 2.
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_on_all(); // Turns on the Screen.
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);  // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (gameState == 0)
;
	lda     _gameState
	bne     L000C
;
; if (pad1 & PAD_START) 
;
	lda     _pad1
	and     #$10
	beq     L0002
;
; currentLevel = 0; 
;
	lda     #$00
	sta     _currentLevel
;
; loadLevel(currentLevel);
;
	jsr     _loadLevel
;
; gameState = 1;
;
	lda     #$01
	sta     _gameState
;
; else if (gameState == 1)
;
	jmp     L0002
L000C:	lda     _gameState
	cmp     #$01
	bne     L0002
;
; modeToggle();
;
	jsr     _modeToggle
;
; if (mode == 0)
;
	lda     _mode
	bne     L000D
;
; walkMode();
;
	jsr     _walkMode
;
; else if (mode == 1)
;
	jmp     L000B
L000D:	lda     _mode
	cmp     #$01
	bne     L000B
;
; shootMode();
;
	jsr     _shootMode
;
; applyGravity();
;
L000B:	jsr     _applyGravity
;
; updateBullet(); // Moves Bullet.
;
	jsr     _updateBullet
;
; portalPlayerCollision(); // Handle Portal Collision with the Player. 
;
	jsr     _portalPlayerCollision
;
; oam_clear(); // Clears the OAM buffer.
;
	jsr     _oam_clear
;
; drawSprite(); // Draws the player sprite. 
;
	jsr     _drawSprite
;
; drawBullet(); // Draws the bullet sprites.
;
	jsr     _drawBullet
;
; drawBluePortalSprite();
;
	jsr     _drawBluePortalSprite
;
; drawOrangePortalSprite();
;
	jsr     _drawOrangePortalSprite
;
; while (1){
;
	jmp     L0002

.endproc

