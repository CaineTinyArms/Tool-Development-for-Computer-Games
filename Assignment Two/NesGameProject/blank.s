;
; File generated by cc65 v 2.19 - Git b75f872
;
	.fopt		compiler,"cc65 v 2.19 - Git b75f872"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_write
	.import		_check_collision
	.import		_set_scroll_y
	.export		_testSprite
	.export		_orangePortal
	.export		_bluePortal
	.export		_orangeBulletSprite
	.export		_blueBulletSprite
	.export		_testSpriteData
	.export		_orangePortalSpriteData
	.export		_bluePortalSpriteData
	.export		_orangeBulletSpriteData
	.export		_blueBulletSpriteData
	.export		_bluePortalActive
	.export		_orangePortalActive
	.export		_drawSprite
	.export		_drawOrangePortalSprite
	.export		_drawBluePortalSprite
	.export		_paletteBackground
	.export		_paletteSprite
	.export		_testlevel
	.export		_testlevelcollision
	.export		_pad1
	.export		_orangePortalCollision
	.export		_bluePortalCollision
	.export		_lastPortalUsed
	.export		_bulletActive
	.export		_mode
	.export		_aimDirectionX
	.export		_aimDirectionY
	.export		_bulletDirectionX
	.export		_bulletDirectionY
	.export		_modeToggle
	.export		_walkMode
	.export		_shootMode
	.export		_portalPlayerCollision
	.export		_wallDetection
	.export		_playerWallCollision
	.export		_spawnOrangeBullet
	.export		_spawnBlueBullet
	.export		_updateBullet
	.export		_drawBullet
	.export		_main

.segment	"DATA"

_testSpriteData:
	.byte	$10
	.byte	$C8
	.byte	$0F
	.byte	$0E
_orangePortalSpriteData:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
_bluePortalSpriteData:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
_orangeBulletSpriteData:
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
_blueBulletSpriteData:
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
_bluePortalActive:
	.byte	$00
_orangePortalActive:
	.byte	$00
_lastPortalUsed:
	.byte	$00
_bulletActive:
	.byte	$00
_mode:
	.byte	$00
_aimDirectionX:
	.byte	$00
_aimDirectionY:
	.byte	$00
_bulletDirectionX:
	.byte	$00
_bulletDirectionY:
	.byte	$00

.segment	"RODATA"

_testSprite:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_orangePortal:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$81
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$C1
	.byte	$80
_bluePortal:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$C2
	.byte	$80
_orangeBulletSprite:
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$80
_blueBulletSprite:
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$80
_paletteBackground:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$27
	.byte	$12
	.byte	$14
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletteSprite:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_testlevel:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_testlevelcollision:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_orangePortalCollision:
	.res	1,$00
_bluePortalCollision:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ drawSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprite: near

.segment	"CODE"

;
; oam_meta_spr(testSpriteData.X, testSpriteData.Y, testSprite); // Draws the metasprite at x pos 64, y pos 80 and using the testSprite data. Nes Screen is 256 x 240 in pixels, so max range for sprite drawing is 255, 239.
;
	jsr     decsp2
	lda     _testSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _testSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_testSprite)
	ldx     #>(_testSprite)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ drawOrangePortalSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawOrangePortalSprite: near

.segment	"CODE"

;
; if (orangePortalActive)
;
	lda     _orangePortalActive
	beq     L0002
;
; oam_meta_spr(orangePortalSpriteData.X, orangePortalSpriteData.Y, orangePortal);
;
	jsr     decsp2
	lda     _orangePortalSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _orangePortalSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_orangePortal)
	ldx     #>(_orangePortal)
	jmp     _oam_meta_spr
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawBluePortalSprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBluePortalSprite: near

.segment	"CODE"

;
; if (bluePortalActive)
;
	lda     _bluePortalActive
	beq     L0002
;
; oam_meta_spr(bluePortalSpriteData.X, bluePortalSpriteData.Y, bluePortal);
;
	jsr     decsp2
	lda     _bluePortalSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _bluePortalSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_bluePortal)
	ldx     #>(_bluePortal)
	jmp     _oam_meta_spr
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ modeToggle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_modeToggle: near

.segment	"CODE"

;
; unsigned char newSelect = (pad1 & PAD_SELECT); // Sets the new select value to if the button is pressed.
;
	lda     _pad1
	and     #$20
	jsr     pusha
;
; if (newSelect && !oldSelect) // If the value is different, AKA, the button has been pressed.
;
	ldy     #$00
	lda     (sp),y
	beq     L000A
	lda     M0001
	bne     L000A
;
; mode = !mode; // Flip the mode value.
;
	lda     _mode
	jsr     bnega
	sta     _mode
;
; oldSelect = newSelect; // Set the oldSelect to the newSelect, as it is now the old select state.
;
L000A:	lda     (sp),y
	sta     M0001
;
; }
;
	jmp     incsp1

.segment	"DATA"

M0001:
	.byte	$00

.endproc

; ---------------------------------------------------------------
; void __near__ walkMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_walkMode: near

.segment	"CODE"

;
; if (pad1 & PAD_LEFT) // If Left on the DPAD is pressed.
;
	lda     _pad1
	and     #$02
	beq     L0007
;
; testSpriteData.X--; // Decrement the X data of the Player Sprite. 
;
	dec     _testSpriteData
;
; if (playerWallCollision(&testSpriteData)) // If the new location of the Player Sprite is colliding with a wall.
;
	lda     #<(_testSpriteData)
	ldx     #>(_testSpriteData)
	jsr     _playerWallCollision
	tax
	beq     L0006
;
; testSpriteData.X++; // Increment the X data to move it out of the wall.
;
	inc     _testSpriteData
;
; else if (pad1 & PAD_RIGHT) // If Right on the DPAD is pressed.
;
	rts
L0007:	lda     _pad1
	and     #$01
	beq     L0006
;
; testSpriteData.X++; // Increment the X data of the Player Sprite.
;
	inc     _testSpriteData
;
; if (playerWallCollision(&testSpriteData)) // If the new location of the Player Sprite is colliding with a wall.
;
	lda     #<(_testSpriteData)
	ldx     #>(_testSpriteData)
	jsr     _playerWallCollision
	tax
	beq     L0006
;
; testSpriteData.X--; // Decrement the X data to move it out of the wall.
;
	dec     _testSpriteData
;
; }
;
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shootMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shootMode: near

.segment	"CODE"

;
; signed char newDirectionX = 0; // Resets the X aiming direction.
;
	lda     #$00
	jsr     pusha
;
; signed char newDirectionY = 0; // Resets the Y aiming direction.
;
	jsr     pusha
;
; if (pad1 & PAD_UP) // If up is pressed on the DPAD.
;
	lda     _pad1
	and     #$08
	beq     L0015
;
; newDirectionY = -1; // Set the aiming direction for Y to -1.
;
	lda     #$FF
;
; else if (pad1 & PAD_DOWN) // If down is pressed on the DPAD.
;
	jmp     L0019
L0015:	lda     _pad1
	and     #$04
	beq     L0016
;
; newDirectionY = 1; // Set the aiming direction for Y to 1.
;
	lda     #$01
L0019:	ldy     #$00
	sta     (sp),y
;
; if (pad1 & PAD_LEFT) // If left is pressed on the DPAD.
;
L0016:	lda     _pad1
	and     #$02
	beq     L0017
;
; newDirectionX = -1; // Set the aiming direction for X to -1.
;
	lda     #$FF
;
; else if (pad1 & PAD_RIGHT) // If right is pressed on the DPAD.
;
	jmp     L001A
L0017:	lda     _pad1
	and     #$01
	beq     L0007
;
; newDirectionX = 1; // Set the aiming direction for X to 1.
;
	lda     #$01
L001A:	ldy     #$01
	sta     (sp),y
;
; if (newDirectionX != 0 || newDirectionY != 0)
;
L0007:	ldy     #$01
	lda     (sp),y
	bne     L001B
	dey
	lda     (sp),y
	beq     L0008
;
; aimDirectionX = newDirectionX;
;
	iny
L001B:	lda     (sp),y
	sta     _aimDirectionX
;
; aimDirectionY = newDirectionY;
;
	dey
	lda     (sp),y
	sta     _aimDirectionY
;
; if (!bulletActive) // If there is no bullet on the screen currently.
;
L0008:	lda     _bulletActive
	bne     L0012
;
; if (pad1 & PAD_A) // If the A button is pressed.
;
	lda     _pad1
	and     #$80
	beq     L0018
;
; spawnOrangeBullet(); // Shoot an orange bullet.
;
	jsr     _spawnOrangeBullet
;
; else if (pad1 & PAD_B) // If the B button is pressed.
;
	jmp     incsp2
L0018:	lda     _pad1
	and     #$40
	beq     L0012
;
; spawnBlueBullet(); // Shoot a blue bullet.
;
	jsr     _spawnBlueBullet
;
; }
;
L0012:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ portalPlayerCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_portalPlayerCollision: near

.segment	"CODE"

;
; orangePortalCollision = check_collision(&testSpriteData, &orangePortalSpriteData); // Checks if the player is colliding with the data for the first portal.
;
	lda     #<(_testSpriteData)
	ldx     #>(_testSpriteData)
	jsr     pushax
	lda     #<(_orangePortalSpriteData)
	ldx     #>(_orangePortalSpriteData)
	jsr     _check_collision
	sta     _orangePortalCollision
;
; bluePortalCollision = check_collision(&testSpriteData, &bluePortalSpriteData); // Checks if the player is colliding with the data for the second portal.
;
	lda     #<(_testSpriteData)
	ldx     #>(_testSpriteData)
	jsr     pushax
	lda     #<(_bluePortalSpriteData)
	ldx     #>(_bluePortalSpriteData)
	jsr     _check_collision
	sta     _bluePortalCollision
;
; if (orangePortalCollision && lastPortalUsed != 1) // If the player is colliding with the first portal, and the previously used portal isn't the first one.
;
	lda     _orangePortalCollision
	beq     L0002
	lda     _lastPortalUsed
	cmp     #$01
	beq     L0002
;
; testSpriteData.X = bluePortalSpriteData.X; // Sets the player X data to the X location of the second portal.
;
	lda     _bluePortalSpriteData
	sta     _testSpriteData
;
; testSpriteData.Y = bluePortalSpriteData.Y; // Sets the player Y data to the Y location of the second portal.
;
	lda     _bluePortalSpriteData+1
	sta     _testSpriteData+1
;
; lastPortalUsed = 2; // Sets the last used portal as the first portal, or arrived at portal two.
;
	lda     #$02
;
; else if (bluePortalCollision && lastPortalUsed != 2) // If the player is colliding with the second portal, and the previously used portal isn't the second one.
;
	jmp     L0010
L0002:	lda     _bluePortalCollision
	beq     L0007
	lda     _lastPortalUsed
	cmp     #$02
	beq     L0007
;
; testSpriteData.X = orangePortalSpriteData.X; // Sets the player X data to the X location of the first portal. 
;
	lda     _orangePortalSpriteData
	sta     _testSpriteData
;
; testSpriteData.Y = orangePortalSpriteData.Y; // Sets the player Y data to the Y location of the first portal.
;
	lda     _orangePortalSpriteData+1
	sta     _testSpriteData+1
;
; lastPortalUsed = 1; // Sets the last used portal as the second portal, or arrived at portal one.
;
	lda     #$01
;
; else
;
	jmp     L0010
;
; if (!orangePortalCollision && !bluePortalCollision) // If the player is not touching any portals.
;
L0007:	lda     _orangePortalCollision
	bne     L0015
	lda     _bluePortalCollision
	beq     L0010
L0015:	rts
;
; lastPortalUsed = 0; // Sets the last used portal as 0, also means the player can now use any portal.
;
L0010:	sta     _lastPortalUsed
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ wallDetection (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wallDetection: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; if (x >= 32 || y >= 30) // Checks if the player is out of the screen area somehow.
;
	ldy     #$01
	lda     (sp),y
	cmp     #$20
	bcs     L0006
	dey
	lda     (sp),y
	cmp     #$1E
	bcs     L0006
	ldx     #$00
	jmp     L0008
;
; return 1; // Returns a 1 to represent collision.
;
L0006:	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; return testlevelcollision[y * 32 + x]; // Returns the appropriate tile from the testlevelcollision.h array, where 1 represents collision and 0 represents no collision.
;
L0008:	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L0005
	inx
L0005:	sta     ptr1
	txa
	clc
	adc     #>(_testlevelcollision)
	sta     ptr1+1
	ldy     #<(_testlevelcollision)
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ playerWallCollision (struct spriteData *spr)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerWallCollision: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char leftTile   = spr->X >> 3; // Converts the pixel location of the left side of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char rightTile  = (spr->X + spr->width) >> 3; // Converts the pixel location of right side of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	sta     sreg
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     sreg
	ror     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char topTile    = spr->Y >> 3; // Converts the pixel location of the top half of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char bottomTile = (spr->Y + spr->height) >> 3; // Converts the pixel location of the bottom half of the player into a tile location, which makes overlapping easier to detect.
;
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	sta     sreg
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (ptr1),y
	clc
	adc     sreg
	ror     a
	lsr     a
	lsr     a
	jsr     pusha
;
; if (wallDetection(leftTile, topTile)  || wallDetection(rightTile, topTile) || wallDetection(leftTile, bottomTile) || wallDetection(rightTile, bottomTile)) // This checks if any of the tiles are a wall.
;
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0003
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0003
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _wallDetection
	tax
	bne     L0003
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _wallDetection
	tax
	beq     L0005
;
; return 1; // Returns a 1 to represent collision.
;
L0003:	ldx     #$00
	lda     #$01
;
; }
;
L0005:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ spawnOrangeBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnOrangeBullet: near

.segment	"CODE"

;
; orangeBulletSpriteData.X = testSpriteData.X; // Sets the orange bullet X data to the Players X data.
;
	lda     _testSpriteData
	sta     _orangeBulletSpriteData
;
; orangeBulletSpriteData.Y = testSpriteData.Y; // Sets the orange bullet Y data to the Players Y data.
;
	lda     _testSpriteData+1
	sta     _orangeBulletSpriteData+1
;
; bulletActive = 1; // Sets the bullet active to 1, to indicate it is a orange bullet.
;
	lda     #$01
	sta     _bulletActive
;
; bulletDirectionX = aimDirectionX; // Takes the X bullet direction from the X aiming direction.
;
	lda     _aimDirectionX
	sta     _bulletDirectionX
;
; bulletDirectionY = aimDirectionY; // Takes the Y bullet direction from the Y aiming direction.
;
	lda     _aimDirectionY
	sta     _bulletDirectionY
;
; if (bulletDirectionX == 0 && bulletDirectionY == 0) // If the user hasn't pressed any aiming buttons.
;
	lda     _bulletDirectionX
	bne     L0006
	lda     _bulletDirectionY
	beq     L0008
L0006:	rts
;
; bulletDirectionY = -1; // Default to shooting up.
;
L0008:	lda     #$FF
	sta     _bulletDirectionY
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawnBlueBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnBlueBullet: near

.segment	"CODE"

;
; blueBulletSpriteData.X = testSpriteData.X; // Sets the blue bullet X data to the Players X data.
;
	lda     _testSpriteData
	sta     _blueBulletSpriteData
;
; blueBulletSpriteData.Y = testSpriteData.Y; // Sets the blue bullet Y data to the Players Y data.
;
	lda     _testSpriteData+1
	sta     _blueBulletSpriteData+1
;
; bulletActive = 2; // Sets the bullet active to 2, to indicate it's a blue bullet.
;
	lda     #$02
	sta     _bulletActive
;
; bulletDirectionX = aimDirectionX; // Takes the X bullet direction from the X aiming direction.
;
	lda     _aimDirectionX
	sta     _bulletDirectionX
;
; bulletDirectionY = aimDirectionY; // Takes the Y bullet direction from the Y aiming direction.
;
	lda     _aimDirectionY
	sta     _bulletDirectionY
;
; if (bulletDirectionX == 0 && bulletDirectionY == 0) // If the user hasn't pressed any aiming buttons.
;
	lda     _bulletDirectionX
	bne     L0006
	lda     _bulletDirectionY
	beq     L0008
L0006:	rts
;
; bulletDirectionY = -1; // Default to shooting up.
;
L0008:	lda     #$FF
	sta     _bulletDirectionY
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateBullet: near

.segment	"CODE"

;
; if (bulletActive == 0) // If there is no bullet on the screen.
;
	lda     _bulletActive
;
; return; // Do nothing.
;
	bne     L0056
;
; }
;
	rts
;
; if (bulletActive == 1) // If there is an orange bullet on the screen.
;
L0056:	cmp     #$01
	jne     L0044
;
; orangeBulletSpriteData.X += bulletDirectionX; // Move the bullet across the screen.
;
	lda     _bulletDirectionX
	clc
	adc     _orangeBulletSpriteData
	sta     _orangeBulletSpriteData
;
; orangeBulletSpriteData.Y += bulletDirectionY;
;
	lda     _bulletDirectionY
	clc
	adc     _orangeBulletSpriteData+1
	sta     _orangeBulletSpriteData+1
;
; if (orangeBulletSpriteData.X > 250) // IF the bullet goes too far off the screen.
;
	lda     _orangeBulletSpriteData
	cmp     #$FB
	bcc     L0006
;
; bulletActive = 0; // Remove the bullet from being active.
;
	lda     #$00
	sta     _bulletActive
;
; return; 
;
	rts
;
; if (playerWallCollision(&orangeBulletSpriteData)) // If the orange bullet hits a wall.
;
L0006:	lda     #<(_orangeBulletSpriteData)
	ldx     #>(_orangeBulletSpriteData)
	jsr     _playerWallCollision
	tax
	bne     L0057
;
; }
;
	rts
;
; unsigned char tileX = (orangeBulletSpriteData.X + 4) >> 3; // Get the X tile from the centre of the bullet.
;
L0057:	ldx     #$00
	lda     _orangeBulletSpriteData
	clc
	adc     #$04
	bcc     L0008
	inx
L0008:	jsr     asrax3
	jsr     pusha
;
; unsigned char tileY = (orangeBulletSpriteData.Y + 4) >> 3; // Get the Y tile from the centre of the billet.
;
	ldx     #$00
	lda     _orangeBulletSpriteData+1
	clc
	adc     #$04
	bcc     L0009
	inx
L0009:	jsr     asrax3
	jsr     pusha
;
; if (bulletDirectionX > 0 && tileX > 0)
;
	lda     _bulletDirectionX
	sec
	sbc     #$01
	bvs     L000C
	eor     #$80
L000C:	bpl     L003E
	ldy     #$01
	lda     (sp),y
	beq     L003E
;
; tileX--;
;
	sec
	sbc     #$01
;
; else if (bulletDirectionY < 0 && tileX < 31)
;
	jmp     L0034
L003E:	lda     _bulletDirectionY
	asl     a
	bcc     L0011
	ldy     #$01
	lda     (sp),y
	cmp     #$1F
	bcs     L0011
;
; tileX++;
;
	tya
	adc     (sp),y
L0034:	sta     (sp),y
;
; if (bluePortalActive) // If there is a blue portal active.
;
L0011:	lda     _bluePortalActive
	beq     L0016
;
; unsigned char pTileX = bluePortalSpriteData.X >> 3; // Get the X tile from the blue portal.
;
	lda     _bluePortalSpriteData
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char pTileY = bluePortalSpriteData.Y >> 3; // Get the Y tile from the blue portal.
;
	lda     _bluePortalSpriteData+1
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; if (pTileX == tileX && pTileY == tileY) // If the tiles are the same for both portals.
;
	ldy     #$01
	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	bne     L0017
	ldy     #$00
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	bne     L0017
;
; bulletActive = 0; // Remove the bullet and do nothing.
;
	lda     #$00
	sta     _bulletActive
;
; return;
;
	jmp     incsp4
;
; }
;
L0017:	jsr     incsp2
;
; orangePortalSpriteData.X = tileX << 3; // Sets the orange portal X data to Tile X, if there is no portal there already.
;
L0016:	ldy     #$01
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _orangePortalSpriteData
;
; orangePortalSpriteData.Y = tileY << 3; // Sets the orange portal Y data to Tile Y, if there is no portal there already.
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _orangePortalSpriteData+1
;
; orangePortalActive = 1; // Sets the orange portal as active.
;
	lda     #$01
	sta     _orangePortalActive
;
; else if (bulletActive == 2) // If the bullet is a blue bullet.
;
	jmp     L0055
L0044:	lda     _bulletActive
	cmp     #$02
	beq     L0058
;
; }
;
	rts
;
; blueBulletSpriteData.X += bulletDirectionX; // Move the blue bullet sprite across the screen, in the direction of the X aiming variable, I.E, -1 to go left, +1 to go right.
;
L0058:	lda     _bulletDirectionX
	clc
	adc     _blueBulletSpriteData
	sta     _blueBulletSpriteData
;
; blueBulletSpriteData.Y += bulletDirectionY; // Move the blue bullet sprite across the screen, in the direction of the Y aiming variable, I.E, -1 to go up, +1 to go down.
;
	lda     _bulletDirectionY
	clc
	adc     _blueBulletSpriteData+1
	sta     _blueBulletSpriteData+1
;
; if (blueBulletSpriteData.X > 240) // If the bullet goes too far off the screen.
;
	lda     _blueBulletSpriteData
	cmp     #$F1
	bcc     L001F
;
; bulletActive = 0; // Remove the bullet.
;
	lda     #$00
	sta     _bulletActive
;
; return;
;
	rts
;
; if (playerWallCollision(&blueBulletSpriteData)) // If the blue bullet hits a wall.
;
L001F:	lda     #<(_blueBulletSpriteData)
	ldx     #>(_blueBulletSpriteData)
	jsr     _playerWallCollision
	tax
	bne     L0059
;
; }
;
	rts
;
; unsigned char tileX = (blueBulletSpriteData.X + 4) >> 3; // Get the X tile from the centre of the bullet.
;
L0059:	ldx     #$00
	lda     _blueBulletSpriteData
	clc
	adc     #$04
	bcc     L0021
	inx
L0021:	jsr     asrax3
	jsr     pusha
;
; unsigned char tileY = (blueBulletSpriteData.Y + 4) >> 3; // Get the Y tile from the centre of the bullet.
;
	ldx     #$00
	lda     _blueBulletSpriteData+1
	clc
	adc     #$04
	bcc     L0022
	inx
L0022:	jsr     asrax3
	jsr     pusha
;
; if (bulletDirectionX > 0 && tileX > 0)
;
	lda     _bulletDirectionX
	sec
	sbc     #$01
	bvs     L0025
	eor     #$80
L0025:	bpl     L004C
	ldy     #$01
	lda     (sp),y
	beq     L004C
;
; tileX--;
;
	sec
	sbc     #$01
;
; else if (bulletDirectionY < 0 && tileX < 31)
;
	jmp     L0036
L004C:	lda     _bulletDirectionY
	asl     a
	bcc     L002A
	ldy     #$01
	lda     (sp),y
	cmp     #$1F
	bcs     L002A
;
; tileX++;
;
	tya
	adc     (sp),y
L0036:	sta     (sp),y
;
; if (orangePortalActive) // If there is an orange portal active.
;
L002A:	lda     _orangePortalActive
	beq     L002F
;
; unsigned char pTileX = orangePortalSpriteData.X >> 3; // Get the X tile from the Orange Portal.
;
	lda     _orangePortalSpriteData
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; unsigned char pTileY = orangePortalSpriteData.Y >> 3; // Get the Y tile from the Orange Portal.
;
	lda     _orangePortalSpriteData+1
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
;
; if (pTileX == tileX && pTileY == tileY) // IF the tiles are the same for both portals.
;
	ldy     #$01
	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	bne     L0030
	ldy     #$00
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	bne     L0030
;
; bulletActive = 0; // Remove the bullet and do nothing.
;
	lda     #$00
	sta     _bulletActive
;
; return;
;
	jmp     incsp4
;
; }
;
L0030:	jsr     incsp2
;
; bluePortalSpriteData.X = tileX << 3; // Sets the blue portal X data to Tile X, if there is no portal there already.
;
L002F:	ldy     #$01
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _bluePortalSpriteData
;
; bluePortalSpriteData.Y = tileY << 3; // Sets the blue portal Y data to Tile Y, if there is no portal there already.
;
	dey
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	sta     _bluePortalSpriteData+1
;
; bluePortalActive = 1; // Sets the blue portal to active. 
;
	lda     #$01
	sta     _bluePortalActive
;
; bulletActive = 0; // Removes the bullet, allowing for more shots.
;
L0055:	sty     _bulletActive
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ drawBullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBullet: near

.segment	"CODE"

;
; if (bulletActive == 1) // If the bullet active is orange.
;
	lda     _bulletActive
	cmp     #$01
	bne     L0006
;
; oam_meta_spr(orangeBulletSpriteData.X, orangeBulletSpriteData.Y, orangeBulletSprite); // Draw the orange sprite.
;
	jsr     decsp2
	lda     _orangeBulletSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _orangeBulletSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_orangeBulletSprite)
	ldx     #>(_orangeBulletSprite)
;
; else if (bulletActive == 2) // If the bullet active is blue.
;
	jmp     _oam_meta_spr
L0006:	lda     _bulletActive
	cmp     #$02
	bne     L0004
;
; oam_meta_spr(blueBulletSpriteData.X, blueBulletSpriteData.Y, blueBulletSprite); // Draw the blue sprite.
;
	jsr     decsp2
	lda     _blueBulletSpriteData
	ldy     #$01
	sta     (sp),y
	lda     _blueBulletSpriteData+1
	dey
	sta     (sp),y
	lda     #<(_blueBulletSprite)
	ldx     #>(_blueBulletSprite)
	jmp     _oam_meta_spr
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // Turns the screen off.
;
	jsr     _ppu_off
;
; pal_bg(paletteBackground); // Sets the Background Palette.
;
	lda     #<(_paletteBackground)
	ldx     #>(_paletteBackground)
	jsr     _pal_bg
;
; pal_spr(paletteSprite); // Sets the Sprite Palette.
;
	lda     #<(_paletteSprite)
	ldx     #>(_paletteSprite)
	jsr     _pal_spr
;
; set_scroll_y(0xff); // Moves the background down by 1 pixel.
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A); // Sets the address to NameTable A (the first name table), for the data to be written to.
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(testlevel, sizeof(testlevel)); // Writes the data from the testlevel header 
;
	lda     #<(_testlevel)
	ldx     #>(_testlevel)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; bank_spr(1); // Tells the program to use the second batch of tiles from the bank for the sprite. Both background and sprite uses 0 by default, however Alpha3 has the sprite tiles on 2.
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_on_all(); // Turns on the Screen.
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);  // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; modeToggle();
;
	jsr     _modeToggle
;
; if (mode == 0)
;
	lda     _mode
	bne     L0008
;
; walkMode();
;
	jsr     _walkMode
;
; else if (mode == 1)
;
	jmp     L0007
L0008:	lda     _mode
	cmp     #$01
	bne     L0007
;
; shootMode();
;
	jsr     _shootMode
;
; updateBullet(); // Moves Bullet.
;
L0007:	jsr     _updateBullet
;
; portalPlayerCollision(); // Handle Portal Collision with the Player. 
;
	jsr     _portalPlayerCollision
;
; oam_clear(); // Clears the OAM buffer.
;
	jsr     _oam_clear
;
; drawSprite(); // Draws the player sprite. 
;
	jsr     _drawSprite
;
; drawBullet(); // Draws the bullet sprites.
;
	jsr     _drawBullet
;
; drawBluePortalSprite();
;
	jsr     _drawBluePortalSprite
;
; drawOrangePortalSprite();
;
	jsr     _drawOrangePortalSprite
;
; while (1){
;
	jmp     L0002

.endproc

