;
; File generated by cc65 v 2.19 - Git b75f872
;
	.fopt		compiler,"cc65 v 2.19 - Git b75f872"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.export		_i
	.export		_pad1
	.export		_text
	.export		_palette
	.export		_setSubPalette0
	.export		_setSubPalette1
	.export		_main

.segment	"RODATA"

_text:
	.byte	$53,$69,$67,$6D,$61,$20,$42,$6F,$79,$00
_palette:
	.byte	$27
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0A
	.byte	$0E
	.byte	$15
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_pad1:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ setSubPalette0 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSubPalette0: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0,0) + 0x03C0);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0x00, 64);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$40
	jsr     _vram_fill
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ setSubPalette1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSubPalette1: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0,0) + 0x03C0);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0x55, 64);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     #$40
	jsr     _vram_fill
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; vram_adr(NTADR_A(2,14)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$C2
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while(text[i]){
;
	jmp     L0004
;
; vram_put(text[i]); // this pushes 1 char to the screen
;
L0002:	ldy     _i
	lda     _text,y
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while(text[i]){
;
L0004:	ldy     _i
	lda     _text,y
	bne     L0002
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0007:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);  // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_A) {
;
	and     #$80
	beq     L000C
;
; setSubPalette1();
;
	jsr     _setSubPalette1
;
; if (pad1 & PAD_B) {
;
L000C:	lda     _pad1
	and     #$40
	beq     L0007
;
; setSubPalette0();
;
	jsr     _setSubPalette0
;
; while (1){
;
	jmp     L0007

.endproc

